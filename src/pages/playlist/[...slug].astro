---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
    const playlists = await getCollection('playlists');
    return playlists.map((playlist) => ({
        params: { slug: playlist.id },
        props: { playlist: playlist, allSongs: [...new Set(playlists.map(playlist => playlist.data.songs).flat().map(song => `${song.title} - ${song.artists}`).sort())] },
    }));
}

type Props = { playlist: CollectionEntry<'playlists'>, allSongs: string[] };

const { playlist, allSongs } = Astro.props as Props;
---

<Layout title={playlist.data.playlistName}>
    <main class="flex flex-col items-center">
        <h1 class="text-2xl text-white">{playlist.data.playlistName}</h1>

        <audio id="song-audio" >
            <source id="song-source" src="" type="audio/mpeg" />
            Your browser does not support the audio element.
        </audio>

        <button 
            id="play-button" 
            class="p-2 bg-blue-700 disabled:bg-blue-900 disabled:text-gray-400 disabled:cursor-not-allowed text-white rounded-lg m-2">
            Play song
        </button>

        <p class="text-white mt-4"><span id="current-time">0</span> seconds</p>

         <div class="flex gap-2">
            <label for="volume-slider" class="text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                <path d="M13.5 4.06c0-1.336-1.616-2.005-2.56-1.06l-4.5 4.5H4.508c-1.141 0-2.318.664-2.66 1.905A9.76 9.76 0 0 0 1.5 12c0 .898.121 1.768.35 2.595.341 1.24 1.518 1.905 2.659 1.905h1.93l4.5 4.5c.945.945 2.561.276 2.561-1.06V4.06ZM18.584 5.106a.75.75 0 0 1 1.06 0c3.808 3.807 3.808 9.98 0 13.788a.75.75 0 0 1-1.06-1.06 8.25 8.25 0 0 0 0-11.668.75.75 0 0 1 0-1.06Z" />
                <path d="M15.932 7.757a.75.75 0 0 1 1.061 0 6 6 0 0 1 0 8.486.75.75 0 0 1-1.06-1.061 4.5 4.5 0 0 0 0-6.364.75.75 0 0 1 0-1.06Z" />
            </svg>
            </label>
            <input 
                type="range" 
                id="volume-slider"
                min="0" 
                max="1" 
                step="0.01" 
                value="0.5"/>
        </div>
                      
        <div class="mt-4">
            <p class="text-white">Guess the song (5 attempts):</p>

            {Array.from({ length: 5 }).map((_, index) => (
                <div class="my-2 flex items-center bg-white border rounded-lg" id={`guess-${index}-container`}>
                    <input 
                        type="text" 
                        class="bg-transparent guess-input p-2 text-black disabled:opacity-50 max-w-96 w-96 min-w-screen" 
                        list="songs-list" 
                        id={"guess" + index} 
                        placeholder={"Attempt " + (index + 1)}
                    />
                    <button 
                        type="button" 
                        id={"guess-skip-" + index} 
                        class="guess-input guess-skip p-2 border-l-2 border-gray-300 h-full text-gray-500 hover:text-gray-700 disabled:text-gray-300 disabled:hover:text-gray-300" >
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                            <path d="M5.055 7.06C3.805 6.347 2.25 7.25 2.25 8.69v8.122c0 1.44 1.555 2.343 2.805 1.628L12 14.471v2.34c0 1.44 1.555 2.343 2.805 1.628l7.108-4.061c1.26-.72 1.26-2.536 0-3.256l-7.108-4.061C13.555 6.346 12 7.249 12 8.689v2.34L5.055 7.061Z" />
                        </svg>
                    </button>
                </div>
            ))}
        </div>

        <datalist id="songs-list">
            {allSongs.map((song) => (
                <option value={song} />
            ))}
        </datalist>

        <div class="absolute inset-0 flex items-center justify-center backdrop-blur-sm bg-black/50 hidden" id="modal">
            <div class={`modal-container bg-white p-6 rounded-lg shadow-lg max-w-md w-full `}>
                <div class="modal-header mb-4">
                    <h2 class="text-2xl font-bold text-black" id="modal-title"></h2>
                    <h3 class="text-lg text-gray-500" id="modal-description"></h3>
                </div>
                
                <p class="text-gray-700 mb-4"></p>
                <iframe class="w-full h-24 rounded-md" id="modal-embed" src="" allowfullscreen="" allow="clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>

                <div class="flex justify-center">
                    <a href="/" class="p-2 bg-blue-700 text-white rounded-lg">Return Home</a>
                </div>
            </div>
        </div>
        

    </main>

    <script defer define:vars={{allSongs, playlist}} >
        let attempts = 0;
        let songPlaying = false;

        const randomSongIndex = getRandomSongIndex(playlist.data.songs.length);
        const randomSong = playlist.data.songs[randomSongIndex];
        const randomSongString = `${randomSong.title} - ${randomSong.artists}`;

        function getRandomSongIndex(songCount) {
            const now = new Date();
            const start = new Date(now.getFullYear(), 0, 0);
            const diff = now.getTime() - start.getTime();
            const oneDay = 1000 * 60 * 60 * 24;
            const day = Math.floor(diff / oneDay);
            return day % songCount;
        }

        function getGuessesFromCookie() {
            const cookieValue = getCookie(`guesses-${playlist.id}`);
            return cookieValue ? JSON.parse(cookieValue) : [];
        }

        function saveGuessesToCookie(guesses) {
            setCookie(`guesses-${playlist.id}`, JSON.stringify(guesses), false);
        }

        function setCookie(name, value, infinite=false) {
            if(infinite) {
                document.cookie = `${name}=${value}; path=/`;
            } else {
                const now = new Date();
                const expirationDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                document.cookie = `${name}=${value}; path=/; expires=${expirationDate.toUTCString()}`;
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('song-source').src = randomSong.previewUrl;
            document.getElementById('song-audio').load();
            document.getElementById('modal-embed').src = randomSong.embedUrl;

            const savedGuesses = getGuessesFromCookie();
            attempts = savedGuesses.length;

            savedGuesses.forEach((guess, index) => {
                const input = document.getElementById(`guess${index}`);
                input.value = guess;
                if (guess === randomSongString) {
                    attempts = 5;
                    document.getElementById(`guess-${index}-container`).classList.add('!bg-green-200');

                    document.getElementById('modal').classList.remove('hidden');
                    document.getElementById('modal-title').innerText = 'You got it!';
                    document.getElementById('modal-description').innerText = 'You guessed the correct song wow I\'m so proud of you...';
                } else {
                    document.getElementById(`guess-${index}-container`).classList.add('!bg-red-200');
                }
            });

            if(savedGuesses.length === 5) {
                document.getElementById('modal').classList.remove('hidden');
                document.getElementById('modal-title').innerText = 'You lowkey flopped...';
                document.getElementById('modal-description').innerText = 'You didn\'t seem to get the right song, you shouldn\'t persue a career in music';
            }

            const savedVolume = getCookie('volume');
            if (savedVolume) {
                document.getElementById('song-audio').volume = savedVolume;
                document.querySelector('input[type="range"]').value = savedVolume;
            }

            disablePreviousInputs();
        });

        function disablePreviousInputs() {
            const inputs = document.querySelectorAll('.guess-input');
            inputs.forEach((input) => {
                input.parentElement.classList.add('bg-gray-400');
                input.disabled = true;
            });
            if (attempts < 5) {
                document.getElementById(`guess${attempts}`).disabled = false;
                document.getElementById(`guess-skip-${attempts}`).disabled = false;
                document.getElementById(`guess-${attempts}-container`).classList.remove('bg-gray-400');
            }
        }

        function validateSongInput(input) {
            const song = input.value;
            const savedGuesses = getGuessesFromCookie();

            if (song === '') return;
            if (!allSongs.includes(song)) return;

            savedGuesses.push(song);
            saveGuessesToCookie(savedGuesses);

            if (song !== randomSongString) {
                document.getElementById(`guess-${attempts}-container`).classList.add('!bg-red-200');
                attempts++;
                songPlaying = false;
                disablePreviousInputs();
                if (attempts === 5) {
                    document.getElementById('modal').classList.remove('hidden');
                    document.getElementById('modal-title').innerText = 'You lowkey flopped...';
                    document.getElementById('modal-description').innerText = 'You didn\'t seem to get the right song, you shouldn\'t persue a career in music';
                } else {
                    document.getElementById('play-button').disabled = false;
                }
            } else {
                document.getElementById(`guess-${attempts}-container`).classList.add('!bg-green-200');
                disablePreviousInputs();
                document.getElementById('modal').classList.remove('hidden');
                document.getElementById('modal-title').innerText = 'You got it!';
                document.getElementById('modal-description').innerText = 'You guessed the correct song wow I\'m so proud of you...';
            }
        }

        document.querySelectorAll('.guess-input').forEach((input, index) => {
            input.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    validateSongInput(input);
                }
            });
        });

        document.querySelectorAll('.guess-skip').forEach((button, index) => {
            button.addEventListener('click', () => {
                const savedGuesses = getGuessesFromCookie();
                savedGuesses.push('');
                saveGuessesToCookie(savedGuesses);

                button.parentElement.classList.add('!bg-red-200');

                attempts++;
                songPlaying = false;
                disablePreviousInputs();

                if (attempts === 5) {
                    document.getElementById('modal').classList.remove('hidden');
                    document.getElementById('modal-title').innerText = 'You lowkey flopped...';
                    document.getElementById('modal-description').innerText = 'You didn\'t seem to get the right song, you shouldn\'t persue a career in music';
                } else {
                    document.getElementById('play-button').disabled = false;
                }
            });
        });

        document.getElementById('play-button').addEventListener('click', () => {
            document.getElementById('play-button').innerText = 'Click anywhere to pause';
            document.getElementById('song-audio').currentTime=0;
            document.getElementById('song-audio').play();
            songPlaying = true;
        });

        document.getElementById('volume-slider').addEventListener('input', function() {
            document.getElementById('song-audio').volume = this.value;
            saveVolume(this.value);
        });

        document.addEventListener('mousedown', (event) => {
            if (songPlaying && (event.target.type !== 'text' && event.target.type !== 'range')) {
                document.getElementById('song-audio').pause();
                document.getElementById('play-button').disabled = true;
                document.getElementById('play-button').innerText = 'Play song';
            }
        });

        document.getElementById('song-audio').addEventListener('timeupdate', function() {
            document.getElementById('current-time').innerText = Math.floor(this.currentTime);
        });

        function saveVolume (value) {
            setCookie('volume', value, true);
        };
    </script>
</Layout>
